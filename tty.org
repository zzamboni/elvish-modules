#+title: ANSI / Terminal utilities for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Functions for terminal ANSI code manipulation/interaction in Elvish.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:tty.elv][tty.elv]] for the generated file.

* Table of Contents                                          :TOC_3:noexport:
- [[#usage][Usage]]
  - [[#functions][Functions]]
- [[#implementation][Implementation]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]] (you can put these statements in your =rc.elv= file as well, to automatically install the package upon startup if needed):

#+begin_src elvish
  use epm
  epm:install &silent-if-installed github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/<module>
#+end_src

** Functions

The base function is =tty:csi=, which emits a [[https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences][CSI sequence]] composed by joining all the given parameters together, prepended with the ~ESC [~ sequence. Parameters which are lists are joined by semicolons. For example:

#+begin_src elvish
  tty:csi 0 K       # Emits CSI 0 K, clear to end of line
  tty:csi [3 5] H   # Emits CSI 3;5H, move to row 3, column 5
#+end_src

If the escape sequence "reports" a value back via the terminal, you can use =tty:csi-report=, which receives as first argument the delimiter character to expect for the response, and the rest of the arguments are the sequence to issue, as passed to =tty:csi=. For example:

#+begin_src elvish
  [~]|> tty:csi-report R 6 n
  â–¶ "\e[6;1R"
#+end_src

*Note:* interactively, the =tty:csi-report= function produces an extra empty line on some terminals, but the returned value is still correct.

The =tty:with-stty= executes a function within a context with the given =stty= parameters. For example:

*Credits:* thanks [[https://github.com/hanche][@hanche]] for this function, which made =tty:cursor-pos= possible!

#+begin_src elvish
  # Read a string without it echoing to the terminal
  pass = (tty:with-stty [-echo] { read-line })
#+end_src

Some common sequences have their own functions. Both descriptive names and short names (according to [[https://en.wikipedia.org/wiki/ANSI_escape_code#Terminal_output_sequences][this table]]) are available:

- =tty:cursor-pos= / =tty:dsr=: return the cursor position as =[row column]=.
- =tty:set-cursor-pos= / =tty:cup=: set the cursor position to =row column=.
- =tty:clear-line= / =tty:el=: clear a part of the line. =&mode= specifies what to clear. If =&mode= is 0 (default), clear from cursor to the end of the line. If =&mode= is 1, clear from cursor to beginning of the line. If =&mode= is 2, clear entire line.
* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+begin_src elvish
  use re
  use str
#+end_src

Execute a function with given =stty= parameters.

#+begin_src elvish
  fn with-stty {|args cmd~|
    var stty = (stty -g </dev/tty)
    try { stty $@args </dev/tty >/dev/tty; cmd } finally { stty $stty </dev/tty >/dev/tty}
  }
#+end_src

Emit a CSI escape sequence. The arguments are joined without a separator, but elements that are lists are themselves joined by semicolons.

#+begin_src elvish
  fn csi {|@cmd|
    print "\e["(str:join '' [(
          each {|e|
            if (eq (kind-of $e) list) {
              str:join ';' $e
            } else {
              put $e
            }
    } $cmd)]) >/dev/tty
  }
#+end_src

Emit a CSI escape sequence which reports a return value on the input, and reads the produced string up to the given delimiter character. The first argument is the delimiter, the rest are the arguments passed to =tty:csi= for the sequence to emit. Returns a string containing the whole reported result.

#+begin_src elvish
  fn csi-report {|delim @cmd|
    with-stty [-echo raw] { csi $@cmd; read-upto $delim </dev/tty }
  }
#+end_src

Get cursor position. Returns a two-list element with =[ row column ]=.

#+begin_src elvish
  fn cursor-pos {
    var res = (csi-report R 6 n)
    put (re:find '\[(\d+);(\d+)R' $res)[groups][{1,2}][text]
  }

  # Short name alias according to https://en.wikipedia.org/wiki/ANSI_escape_code
  var dsr~ = $cursor-pos~
#+end_src

Set cursor position. Takes two arguments =row= and =column=.

#+begin_src elvish
  fn set-cursor-pos {|row col|
    csi [$row $col] H
  }

  # Short name alias according to https://en.wikipedia.org/wiki/ANSI_escape_code
  var cur~ = $set-cursor-pos~
#+end_src

Clear a part of the line. =&mode= specifies what to clear. If =&mode= is 0 (default), clear from cursor to the end of the line. If =&mode= is 1, clear from cursor to beginning of the line. If =&mode= is 2, clear entire line.

#+begin_src elvish
  fn clear-line {|&mode=0|
    csi $mode K
  }

  # Short name alias according to https://en.wikipedia.org/wiki/ANSI_escape_code
  var el~ = $clear-line~
#+end_src

Hide or show the cursor.

#+begin_src elvish
  fn hide-cursor {
    csi '?' 25 l
  }

  fn show-cursor {
    csi '?' 25 h
  }
#+end_src
