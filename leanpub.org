#+TITLE:  LeanPub utilities for Elvish
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

#+name: module-summary
This module provides some interfaces to the [[https://leanpub.com/help/api][LeanPub API]].

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:leanpub.elv][leanpub.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
use epm
epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
use github.com/zzamboni/elvish-modules/leanpub
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+begin_src elvish
  use str

  var api-key = $nil
  var api-key-fn = $nil
#+end_src

This function returns the Leanpub API key to use. If =$leanpub:api-key= is set, it is returned. Else, if =$leanpub:api-key-fn= is defined, it is called and its return value used and stored in =$leanpub:api-key= for future use.

#+begin_src elvish
  fn api-key {
    if $api-key {
      put $api-key
    } elif $api-key-fn {
      set api-key = ($api-key-fn)
      put $api-key
    } else {
      fail "Please set leanpub:api-key or leanpub:api-key-fn"
    }
  }
#+end_src

#+begin_src elvish
  fn get-slug {|@args|
    if (eq $args []) {
      put [(str:split / $pwd)][-1]
    } else {
      put $args[0]
    }
  }
#+end_src

#+begin_src elvish
  fn preview {|@args|
    var slug = (get-slug $@args)
    pprint (curl -s -d "api_key="(api-key) https://leanpub.com/$slug/preview.json | from-json)
  }
#+end_src

#+begin_src elvish
  fn subset {|@args|
    var slug = (get-slug $@args)
    pprint (curl -s -d "api_key="(api-key) https://leanpub.com/$slug/preview/subset.json | from-json)
  }
#+end_src

#+begin_src elvish
  fn publish {|@args|
    var slug = (get-slug $@args)
    pprint (curl -s -d "api_key="(api-key) https://leanpub.com/$slug/publish.json | from-json)
  }
#+end_src

#+begin_src elvish
  fn status {|@args|
    var slug = (get-slug $@args)
    var status = (curl -s "https://leanpub.com/"$slug"/job_status?api_key="(api-key) | from-json)
    if (has-key $status backtrace) {
      var file = (mktemp)
      echo $status[backtrace] > $file
      del status[backtrace]
      set status[error-log] = $file
    }
    put $status
    if (has-key $status error-log) {
      fail "An error occurred. The backtrace is at "$status[error-log]
    }
  }
#+end_src

#+begin_src elvish
  fn watch {|@args|
    var slug = (get-slug $@args)
    var s = (status $slug)
    while (not-eq $s [&]) {
      pprint $s
      sleep 5
      set s = (status $slug)
    }
  }
#+end_src

#+begin_src elvish
  fn preview-and-watch {|@args|
    var slug = (get-slug $@args)
    preview $slug
    watch $slug
  }
#+end_src

#+begin_src elvish
  fn subset-and-watch {|@args|
    var slug = (get-slug $@args)
    subset $slug
    watch $slug
  }
#+end_src

#+begin_src elvish
  fn publish-and-watch {|@args|
    var slug = (get-slug $@args)
    publish $slug
    watch $slug
  }
#+end_src

#+begin_src elvish
  fn do-subset {|@args|
    var msg = (echo $@args)
    git ci -a -m $msg
    git push
    subset-and-watch
  }
#+end_src

#+begin_src elvish
  fn info {|@args|
    var slug = (get-slug $@args)
    pprint (curl -s "https://leanpub.com/"$slug".json?api_key="(api-key) | from-json)
  }
#+end_src
