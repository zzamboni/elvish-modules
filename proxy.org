#+title: Automatic proxy settings for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Manipulation of proxy-related environment variables (including auto-setting/unsetting based on a user-defined test) for [[http://elvish.io][Elvish]].

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:proxy.elv][proxy.elv]] for the generated file.

* Table of Contents :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries][Libraries]]
  - [[#configuration][Configuration]]
  - [[#functions][Functions]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
use epm
epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
use github.com/zzamboni/elvish-modules/proxy
#+end_src

Set your default proxy host (including port number) by assigning it to the =$proxy:host= variable. For example:

#+begin_src elvish
proxy:host = "proxy.corpnet.com:8079"
#+end_src

You can now manually set/unset the proxy environment variables by calling =proxy:set= and =proxy:unset=, respectively.

For now only the =http_proxy= and =https_proxy= environment variables are set.

If you want to enable automatic proxy switching, you need to define a check function and assign it to the =$proxy:test= variable. It should be a lambda which receives no arguments, and returns a true/false value. When the function returns true, the proxy will be set. For example, the following function will set the proxy whenever =/etc/resolv.conf= contains any search or domain definitions ending in "corpnet.com":

#+begin_src elvish
proxy:test = { and ?(test -f /etc/resolv.conf) ?(egrep -q '^(search|domain).*corpnet.com' /etc/resolv.conf) }
#+end_src

If you want to temporarily disable the proxy auto-set function in the current session after having defined a test function, you can run the =proxy:disable= command. Use =proxy:enable= to reenable it when needed. Note that =proxy:disable= also unsets the proxy variables.

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+begin_src elvish :exports none
  # DO NOT EDIT THIS FILE DIRECTLY
  # This is a file generated from a literate programing source file located at
  # https://github.com/zzamboni/elvish-modules/blob/master/proxy.org.
  # You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

** Libraries

We use the =prompt-hooks= library to set up the hooks for the auto-set feature.

#+begin_src elvish
  use ./prompt-hooks
  use str
#+end_src

** Configuration

The =$proxy:host= variable contains the proxy host to used by default, in "http://host:port" format.

#+begin_src elvish
  var host = ""
#+end_src

=$proxy:test= contains the auto-set test function. It must be either =$false= (to disable auto-setting) or a lambda which receives no arguments, and return a true value (anything except =$false= or an error, as per [[https://elvish.io/ref/builtin.html#bool][Elvish's booleanly interpretation of values]]) when the proxy needs to be automatically set, false otherwise.

To enable auto-setting you must override it with code that performs a meaningful check for your needs.

#+begin_src elvish
  var test = $false
#+end_src

Whether to print notifications when setting/unsetting the proxy.

#+begin_src elvish
  var notify = $true
#+end_src

Whether autoset should be disabled (useful for temporarily stopping the automatic proxy setting using =proxy:disable=).

#+begin_src elvish
  var disable-autoset = $false
#+end_src

The list of environment variables to set. By default only =http_proxy= and =https_proxy= are set.

#+begin_src elvish
  var env-vars = [ http_proxy https_proxy ]
#+end_src

** Functions

Check whether the proxy is set. We use the first variable in =$proxy:env-vars= for the check, with the assumption that the other variables follow.

#+begin_src elvish
  fn is-set {
    eval "not-eq $E:"(take 1 $env-vars)" ''"
  }
#+end_src

Set the proxy variables to the given string. If no parameters are given but =$proxy:host= is set, then its value is used. Note that passing an argument to this function *does not set $param:host*, this needs to be done explicitly if you want it.

#+begin_src elvish
  fn set-proxy {|@param|
    var proxyhost = $host
    if (> (count $param) 0) {
      set proxyhost = $param[0]
    }
    if (not-eq $proxyhost "") {
      each {|var| set-env $var $host } $env-vars
    }
  }
#+end_src

Unset the proxy variables.

#+begin_src elvish
  fn unset-proxy {
    each {|var| unset-env $var } $env-vars
  }
#+end_src

Disable auto-set and unset the proxy.

#+begin_src elvish
  fn disable {
    set disable-autoset = $true
    unset-proxy
  }
#+end_src

Enable auto-set after it had been disabled using =proxy:disable-autoset=.

#+begin_src elvish
  fn enable {
    set disable-autoset = $false
  }
#+end_src

This is the function that powers the auto-set feature. It runs =$proxy:test= and sets/unsets the variables depending on the result.

#+begin_src elvish
  fn autoset {|@_|
    if (or (not $test) $disable-autoset) {
      return
    }
    if ($test) {
      if (and $host (not (eq $host ""))) {
        if (and $notify (not (is-set))) {
          echo (styled "Setting proxy "$host blue)
        }
        set-proxy
      } else {
        fail "You need to set $proxy:host to the proxy to use"
      }
    } else {
      if (and $notify (is-set)) {
        echo (styled "Unsetting proxy" blue)
      }
      unset-proxy
    }
  }
#+end_src

The =proxy:init= function adds the =proxy:autoset= function to both the before- and after-command hooks.

#+begin_src elvish
  fn init {
    prompt-hooks:add-before-readline $autoset~
    prompt-hooks:add-after-readline $autoset~
  }
#+end_src

We call =init= automatically on module load.

#+begin_src elvish
  init
#+end_src
