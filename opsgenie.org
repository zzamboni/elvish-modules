#+title: OpsGenie API functions for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
This module implements a few common operations for the [[https://docs.opsgenie.com/docs/api-overview][OpsGenie API]] in Elvish.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:$name.elv][$name.elv]] for the generated file.

* Table of Contents :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/opsgenie
#+end_src

You need to specify your API key so that it can be used in the requests:

#+begin_src elvish
  opsgenie:api-key = 'xxxx00x0-0xxx-0000-x00x-00x0000xx0xx'
#+end_src

=opsgenie:admins= returns a map containing the users which have =admin= role in their teams as keys, with the value being the team in which they have that role.

#+begin_src elvish :use private,github.com/zzamboni/elvish-modules/opsgenie
  opsgenie:admins
#+end_src

#+results:
: â–¶ [&user1@company.com=team1 &user2@company.com=team2 ...]

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

Load modules used in the code.

#+begin_src elvish
  use str
#+end_src

First, we declare the variable that will contain the API key.

#+begin_src elvish
  var api-key = ''
#+end_src

For write operations, we can set a secondary key which has the necessary privileges.

#+begin_src elvish
  var write-api-key = ''
#+end_src

We initialize the API URL.

#+begin_src elvish
  var api-url = 'https://api.eu.opsgenie.com/v2'
#+end_src

The =opsgenie:request= function is the lowest-level function - it simply queries an API URL, parses and returns the result.

#+begin_src elvish
  fn request {|url &params=[&]|
    var auth-hdr = 'Authorization: GenieKey '$api-key
    set params = [(keys $params | each {|k| put "--data-urlencode" $k"="$params[$k] })]
    curl -G -s $@params -H $auth-hdr $url | from-json
  }
#+end_src

The =opsgenie:post-request= function is similar but receives a =$data= payload which should be a map, and is posted as JSON together with the request.

#+begin_src elvish
  fn post-request {|url data|
    var auth-hdr = 'Authorization: GenieKey '$write-api-key
    var json-data = (put $data | to-json)
    curl -X POST -H $auth-hdr -H 'Content-Type: application/json' --data $json-data $url
  }
#+end_src

The =opsgenie:request-data= returns the =data= field in the response.

#+begin_src elvish
  fn request-data {|url &paged=$true|
    var response = (request $url)
    var data = $response[data]
    if $paged {
      while (and (has-key $response paging) (has-key $response[paging] next)) {
        set response = (request $response[paging][next])
        var newdata = $response[data]
        set data = [ $@data $@newdata ]
      }
    }
    put $data
  }
#+end_src

#+begin_src elvish
  fn admins {
    var admins = [&]
    var url = $api-url'/teams'
    put (all (request-data $url))[name] | each {|id|
      #put $id
      try {
        put (all (request-data $url'/'$id'?identifierType=name')[members]) | each {|user|
          #put $user
          if (eq $user[role] admin) {
            set admins[$user[user][username]] = $id
          }
        }
      } except e {
        # This is here to skip teams without members
      }
    }
    put $admins
  }

  fn url-for {|what &params=[&]|
    var params-str = (keys $params | each {|k| put $k"="$params[$k] } | str:join "&")
    put $api-url'/'$what'?'$params-str
  }

  fn list {|what &keys=[name] &params=[&]|
    each {|r|
      var res = [&]
      if (eq $keys []) {
        set res = $r
      } else {
        each {|k|
          set res[$k] = $r[$k]
        } $keys
      }
      put $res
    } (request-data (url-for $what &params=$params))
  }

  fn get {|what &params=[&]|
    request (url-for $what &params=$params)
  }

  fn get-data {|what &params=[&]|
    request-data (url-for $what &params=$params)
  }
#+end_src

#+begin_src elvish
  fn create-user {|username fullname role otherfields &team=""|
    var payload = $otherfields
    set payload[username] = $username
    set payload[fullName] = $fullname
    set payload[role] = [&name= $role]
    post-request (url-for users) $payload
    echo ""
    if (not-eq $team "") {
      var data = [ &user= [ &username= (echo $username | tr '[A-Z]' '[a-z]') ] ]
      post-request (url-for "teams/"$team"/members" &params=[ &teamIdentifierType= name ]) $data
      echo ""
    }
  }
#+end_src

#+begin_src elvish
  fn add-users-to-team {|team @users|
    each {|username|
      var data = [ &user= [ &username= (echo $username | tr '[A-Z]' '[a-z]') ] ]
      post-request (url-for "teams/"$team"/members" &params=[ &teamIdentifierType= name ]) $data
      echo ""
    } $users
  }
#+end_src

#+begin_src elvish
  fn post-api {|path data &params=[&] |
    var url = (url-for $path &params=$params)
    post-request $url $data
  }
#+end_src

#+begin_src elvish
  fn api {|path &params=[&] |
    var url = (url-for $path)
    request $url &params=$params
  }
#+end_src
