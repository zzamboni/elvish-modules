#+title: Bang-bang key bindings for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Implement the =!!= (last command), =!$= (last argument of last command), ~!*~ (all arguments) and =!<n>= (nth argument of last command) shortcuts in Elvish.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:alias.elv][alias.elv]] for the generated file.

* Table of Contents :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries][Libraries]]
  - [[#configuration][Configuration]]
  - [[#inserting-a-plain-exclamation-mark][Inserting a plain exclamation mark]]
  - [[#bang-bang-mode-function][bang-bang mode function]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
use epm
epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module.

#+begin_src elvish
use github.com/zzamboni/elvish-modules/bang-bang
#+end_src

When you press =!=, you will see a menu showing you the different keys your can press, for example, if you try to execute a command that requires =root= privileges:

#+begin_example
  [~]─> ls /var/spool/mqueue/
  "/var/spool/mqueue/": Permission denied (os error 13)
#+end_example

You can type =sudo= and then press =!=, which will show you the menu:

#+begin_example
  [~]─> sudo !
  bang-bang
      ! ls /var/spool/mqueue/
      0 ls
    1 $ /var/spool/mqueue/
      ,* /var/spool/mqueue/
  Alt-! !
#+end_example

If you press =!= a second time, the full command will be inserted at the point:

#+begin_example
  [~]─> sudo ls /var/spool/mqueue/
#+end_example

If you wanted to see the permissions on that directory next, you could use the =!$= shortcut instead:

#+begin_example
  [~]─> ls -ld !
  bang-bang
      ! sudo ls /var/spool/mqueue/
      0 sudo
      1 ls
    2 $ /var/spool/mqueue/
      ,* ls /var/spool/mqueue/
  Alt-! !
#+end_example

Pressing =$= (or =2=) at this point will insert the last argument:

#+begin_example
  [~]─> ls -ld /var/spool/mqueue/
#+end_example

If you wanted to then see the i-node number of the directory, you could type the new partial command and then use the =!*= key to insert all the arguments of the previous command:

#+begin_example
  [~]─> ls -i !
  bang-bang
      ! ls -ld /var/spool/mqueue/
      0 ls
      1 -ld
    2 $ /var/spool/mqueue/
      ,* -ld /var/spool/mqueue/
  Alt-! !
#+end_example

Pressing =*= at this point will insert all the previous command's arguments:

#+begin_example
  [~]─> ls -i -ld /var/spool/mqueue/
#+end_example

By default, =bang-bang:init= (which gets called automatically when the module loads) also binds the default "lastcmd" key (=Alt-1=), and when repeated, it will insert the full command. This means it fully emulates the default [[https://elvish.io/learn/cookbook.html#ui-recipes]["last command"]] behavior. If you want to bind bang-bang to other keys, you can pass them in a list in the =&extra-triggers= option to =bang-bang:init=. For example, to bind bang-bang to =Alt-`= in addition to =!=:

#+begin_src elvish
bang-bang:init &extra-triggers=["Alt-`"]
#+end_src

By default, =Alt-!= (=Alt-Shift-1=) can be used to insert an exclamation mark when you really need one. This works both from insert mode or from "bang-mode" after you have typed the first exclamation mark. If you want to bind this to a different key, specify it with the =&plain-bang= option to =bang-bang:init=, like this:

#+begin_src elvish
bang-bang:init &plain-bang="Alt-3"
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Libraries

We load some necessary libraries.

#+begin_src elvish
  use ./util
  use re
  use str
#+end_src

** Configuration

If you want hooks to be run either before or after entering bang-bang mode, you can add them as lambdas to these variables.

#+begin_src elvish
  var before-lastcmd = []
  var after-lastcmd = []
#+end_src

=$-plain-bang-insert= contains the key that is used to insert a plain =!=, also after entering lastcmd.  *Do not set directly*, instead pass the =&plain-bang= option to =init=.

#+begin_src elvish
  var -plain-bang-insert = ""
#+end_src

=$-extra-trigger-keys= is an array containing the additional keys that will trigger bang-bang mode. These keys will also be bound, when pressed twice, to insert the full last command. *Do not set directly*, instead pass the =&-extra-triggers= option to =init=.

#+begin_src elvish
  var -extra-trigger-keys = []
#+end_src

** Inserting a plain exclamation mark

This function gets bound to the keys specified in =-plain-bang-insert=.

#+begin_src elvish
  fn insert-plain-bang { edit:close-mode; edit:insert-at-dot "!" }
#+end_src

** bang-bang mode function

The =bang-bang:lastcmd= function is the central function of this module.

#+begin_src elvish :noweb no-export
fn lastcmd {
  <<lastcmd code below>>
}
#+end_src

First, we run the "before" hooks, if any.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
for hook $before-lastcmd { $hook }
#+end_src

We get the last command and split it in words for later use.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
var last = [(edit:command-history)][-1]
var parts = [(edit:wordify $last[cmd])]
#+end_src

We also get how wide the first column of the display should be, so that we can draw the selector keys right-aligned.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
var nitems = (count $parts)
var indicator-width = (util:max (+ 2 (count (to-string $nitems))) (count $-plain-bang-insert))
var filler = (repeat $indicator-width ' ' | str:join '')
#+end_src

The =-display-text= function returns the string to display in the menu, with the indicator right-aligned to =$indicator-width= spaces.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
fn -display-text {|ind text|
  var indcol = $filler$ind
  put $indcol[(- $indicator-width)..]" "$text
}
#+end_src

We create the three "fixed" items of the bang-bang menu: the full command and the plain exclamation mark. Additionally, if the command has arguments, we create the "all arguments" item. Each menu item is a map with three keys: =to-accept= is the text to insert when the option is selected, =to-show= is the text to show in the menu, and =to-filter= is the text which can be used by the user to filter/select options.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
var cmd = [
  &to-accept= $last[cmd]
  &to-show=   (-display-text "!" $last[cmd])
  &to-filter= "! "$last[cmd]
]
var bang = [
  &to-accept= "!"
  &to-show=   (-display-text $-plain-bang-insert "!")
  &to-filter= $-plain-bang-insert" !"
]
var all-args = []
var arg-text = ""
if (> $nitems 1) {
  set arg-text = (str:join " " $parts[1..])
  set all-args = [
    &to-accept= $arg-text
    &to-show=   (-display-text "*" $arg-text)
    &to-filter= "* "$arg-text
  ]
}
#+end_src

We now populate the menu items for each word of the command. For the last one, we also indicate that it can be selected with =$=.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
var items = [
  (range $nitems |
    each {|i|
      var text = $parts[$i]
      var ind = (to-string $i)
      if (> $i 9) {
        set ind = ""
      }
      if (eq $i (- $nitems 1)) {
        set ind = $ind" $"
      }
      put [
        &to-accept= $text
        &to-show=   (-display-text $ind $text)
        &to-filter= $ind" "$text
      ]
    }
  )
]
#+end_src

Finally, we put the whole list together.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
var candidates = [$cmd $@items $all-args $bang]
#+end_src

Now we create a list with the keybindings for the different elements of the menu. One-key bindings are only assigned for the first 9 elements and for the last one.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
fn insert-full-cmd { edit:close-mode; edit:insert-at-dot $last[cmd] }
fn insert-part {|n| edit:close-mode; edit:insert-at-dot $parts[$n] }
fn insert-args { edit:close-mode; edit:insert-at-dot $arg-text }
var bindings = [
  &"!"=                 $insert-full-cmd~
  &"$"=                 { insert-part -1 }
  &$-plain-bang-insert= $insert-plain-bang~
  &"*"=                 $insert-args~
]
for k $-extra-trigger-keys {
  set bindings[$k] = $insert-full-cmd~
}
range (util:min (count $parts) 10) | each {|i|
  set bindings[(to-string $i)] = { insert-part $i }
}
set bindings = (edit:binding-table $bindings)
#+end_src

Finally, we invoke custom-listing mode with all the information we have put together, to display the menu and act on the corresponding choice.

#+begin_src elvish :tangle no :noweb-ref "lastcmd code below"
edit:listing:start-custom $candidates &caption="bang-bang " &binding=$bindings &accept={|arg|
  edit:insert-at-dot $arg
  for hook $after-lastcmd { $hook }
}
#+end_src

** Initialization

The =init= function gets called to set up the keybindings. This function can receive two options:

- =&plain-bang= (string) to specify the key to insert a plain exclamation mark when needed. Defaults to ="Alt-!"=.
- =&extra-triggers= (array of strings) to specify additional keys (other than =!=) to trigger bang-bang mode. All of these keys will also be bound, when pressed twice, to insert the full last command (just like =!!=). Defaults to =["Alt-1"]=, which emulates the default last-command keybinding in Elvish.

#+begin_src elvish
  fn init {|&plain-bang="Alt-!" &extra-triggers=["Alt-1"]|
    set -plain-bang-insert = $plain-bang
    set -extra-trigger-keys = $extra-triggers
    set edit:insert:binding[!] = $lastcmd~
    for k $extra-triggers {
      set edit:insert:binding[$k] = $lastcmd~
    }
    set edit:insert:binding[$-plain-bang-insert] = $insert-plain-bang~
  }
#+end_src

We call =init= automatically on module load, although you can call it manually if you want to change the defaults for =plain-bang= or =extra-triggers=.

#+begin_src elvish
  init
#+end_src
