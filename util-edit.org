#+title: Utility interactive functions for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Various utility functions meant to be used in interactive mode.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:util.elv][util.elv]] for the generated file.

* Table of Contents                                          :TOC_3:noexport:
- [[#usage][Usage]]
  - [[#electric-editing-in-command-line][Electric editing in command line]]
- [[#implementation][Implementation]]
  - [[#electric-editing-in-command-line-1][Electric editing in command line]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
use epm
epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
use github.com/zzamboni/elvish-modules/util-edit
#+end_src

The following functions are included:
** Electric editing in command line

The =util-edit:electric-delimiters= function sets up the necessary bindings to automatically insert and delete matching pairs of delimiters. By default the following pairs are recognized, but the list can be augmented by adding the corresponding delimiters to the =util-edit:electric-pairs= variable:

#+begin_src elvish
util-edit:electric-pairs = ['()' '{}' '[]' '""' "''"]
#+end_src

By default, electric pairs are inserted only when the cursor is at the end of the line, or at a space character (i.e. do not insert the full pair when the cursor is on another character). The variable =$util-edit:electric-pair-always= can be set to =$true= to always insert the electric pair.

#+begin_src elvish
util-edit:electric-pair-always = $false
#+end_src
* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Electric editing in command line

The =util:electric-delimiters= function sets up the necessary bindings to automatically insert and delete matching pairs of delimiters. The idea and initial implementation of this function was written by and is included here with the kind permission of [[https://folk.ntnu.no/hanche/en/][Harald Hanche-Olsen]].

We first define the characters (and their corresponding pairs) that should trigger electric insertion.

#+begin_src elvish
electric-pairs = ['()' '{}' '[]' '""' "''"]
#+end_src

By default, electric pairs are inserted only when the cursor is at the end of the line, at a space character (i.e. do not insert the full pair when the cursor is on another character), or at the closing character of a delimiter pair (which allows inserting nested elimiter pairs). The variable =$util:electric-pair-always= can be set to =$true= to always insert the electric pair. The =-should-insert-pair= function returns whether, depending on the cursor position and on the configuration variable, the full pair should be inserted at the moment.

#+begin_src elvish
electric-pair-always = $false

fn -should-insert-pair {
  at-end = (== $edit:-dot (count $edit:current-command))
  at-space = $false
  at-closing = $false
  if (not $at-end) {
    at-space = (eq $edit:current-command[$edit:-dot] ' ')
    at-closing = (or (each [p]{ eq $edit:current-command[$edit:-dot] $p[1] } $electric-pairs))
  }
  or $electric-pair-always $at-end $at-space $at-closing
}
#+end_src

The =-electric-insert-fn= function returns a lambda which inserts either the full electric pair, or only the first character, depending on the configuration and cursor position as checked by =-should-insert-pair=. The lambda returned by =-electric-insert-fn= is the one that should be bound to the first character of all electric pairs of characters.

#+begin_src elvish
fn -electric-insert-fn [pair]{
  put {
    if (-should-insert-pair) {
      edit:insert-at-dot $pair
      edit:move-dot-left
    } else {
      edit:insert-at-dot $pair[0]
    }
  }
}
#+end_src

The =-electric-backspace= function is bound to the Backspace key, and performs an electric delete of both characters in the pair only if the character to be deleted is the first of an electric pair, and if the corresponding pair is right next to it. Otherwise, the normal behavior (delete character to the left of the cursor) takes place.

#+begin_src elvish
fn -electric-backspace {
  if (> $edit:-dot 0) {
    char1 = ''
    char2 = ''
    # To get the previous character, loop through the indices in case
    # the previous character is multi-byte
    i = (- $edit:-dot 1)
    while (not ?(char1 = $edit:current-command[$i])) { i = (- $i 1) }
    if (< $edit:-dot (count $edit:current-command)) {
      char2 = $edit:current-command[$edit:-dot]
    }
    pending-delete = $true
    for pair $electric-pairs {
      if (and (==s $char1 $pair[0]) (==s $char2 $pair[1])) {
        edit:kill-rune-left
        edit:kill-rune-right
        pending-delete = $false
      }
    }
    if $pending-delete {
      edit:kill-rune-left
    }
  }
}
#+end_src

The =electric-delimiters= function is the only user-facing function, and is the one that sets up the corresponding keybindings to call the "electric" functions above.

#+begin_src elvish
fn electric-delimiters {
  for pair $electric-pairs {
    edit:insert:binding[$pair[0]] = (-electric-insert-fn $pair)
  }
  edit:insert:binding[Backspace] = $-electric-backspace~
}
#+end_src
