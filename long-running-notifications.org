#+title: Notifications for long-running commands in Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Produce notifications for long-running commands in Elvish.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:long-running-notifications.elv][long-running-notifications.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
  - [[#notification-mechanisms][Notification mechanisms]]
- [[#implementation][Implementation]]
  - [[#configuration-and-user-accessible-variables][Configuration and user-accessible variables]]
  - [[#notification-mechanisms-1][Notification mechanisms]]
  - [[#time-tracking-functions][Time tracking functions]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-modules= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-modules
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/long-running-notifications
#+end_src

Try it out! Run the following command:

#+begin_src elvish
  sleep 11
#+end_src

The default notification threshold is 10 seconds, so when the command finishes, you will see a notification. The threshold can be changed by assigning a value in seconds to the =long-running-notifications:threshold= variable. For example:

#+begin_src elvish
  long-running-notifications:threshold = 20
#+end_src

You can specify a list commands for which you do not want notifications in the =$long-running-notifications:never-notify= variable, and a list of commands that should always be notified (regardless of how long they took) in =always-notify=. Their default values are:

#+begin_src  elvish
  never-notify = [ vi vim emacs nano less more bat ]
  always-notify = [ ]
#+end_src

If you want to know how long the last command took (for example, for displaying in your prompt), you can use the =$long-running-notifications:last-cmd-duration= variable. The value is in seconds.

*Note*: this module measures command execution time with a granularity of seconds, so anything that takes less than one second will be reported as zero.

** Notification mechanisms

By default, the module tries to determine the best notification method to use based on available commands. The method can be specified manually by assigning one of the following values directly to =$long-running-notifications:notifier=:

- A string, which must be one of the predefined notification mechanisms:
  - =macos= (GUI notifications on macOS, used automatically if [[https://github.com/julienXX/terminal-notifier][terminal-notifier]] is available)
  - =libnotify= (GUI notifications using [[https://developer.gnome.org/libnotify/][libnotify]], used automatically if =notify-send= is available)
  - =text= (prints to the same terminal where the command ran)

- A lambda, which must take three arguments and produce the corresponding notification. The arguments contain the last command (string), its duration (in seconds) and its start time (as seconds in Unix epoch format). For example:

  #+begin_src elvish
    long-running-notifications:notifier = [cmd duration start]{
      echo "LONG COMMAND! Lasted "$duration
    }
  #+end_src

If you write a new notification mechanism which you think might be useful to others, please submit a [[https://github.com/zzamboni/elvish-modules/pulls][pull request]]!

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Configuration and user-accessible variables

Threshold in seconds for producing notifications (default 10).

#+begin_src elvish
  threshold = 10
#+end_src

Variables which can be used to extract information about the last command executed.

#+begin_src elvish
  last-cmd-start-time = 0
  last-cmd = ""
  last-cmd-duration = 0
#+end_src

The =$notifier= variable determines which notification mechanism to use. By default it starts with the value ="auto"= which chooses which one to use automatically, based on the value of =$notifications-to-try= (see below). But you can also hand-choose the method by assigning one of the following:

- A string, which must be one of the predefined notification mechanisms (at the moment =text=, =macos= or =libnotify=).
- A lambda, which must take three arguments and produce the corresponding notification. The arguments contain the last command (string), its duration (in seconds) and its start time (as seconds in Unix epoch format).

#+begin_src elvish
  notifier = auto
#+end_src

The =$notifications-to-try= variable contains the order in which notification mechanisms should be attempted. For each one, their =check= function is executed, and the first one for which it returns =$true= is used.

#+begin_src elvish
  notifications-to-try = [ macos libnotify text ]
#+end_src

Commands for which notifications should never or always be produced, regardless of how long they take

#+begin_src  elvish
  never-notify = [ vi vim emacs nano less more bat ]
  always-notify = [ ]
#+end_src

** Notification mechanisms

Each notification mechanism is defined as a map with two elements: =check= should be a lambda which returns =$true= if that mechanism can be used in the current session, and =notify= must be a lambda which receives three arguments: the command (string), its duration (in seconds) and its start time (as seconds in Unix epoch format).

All notification mechanisms are stored in the =notification-fns= map, by their user-visible name.

#+begin_src elvish
  notification-fns = [
    &text= [
      &check= { put $true }
      &notify= [cmd dur start]{
        echo (styled "Command lasted "$dur"s" magenta) > /dev/tty
      }
    ]
    &libnotify= [
      &check= { put ?(which notify-send >/dev/null 2>&1) }
      &notify= [cmd duration start]{
        notify-send "Finished: "$cmd "Running time: "$duration"s"
      }
    ]
    &macos= [
      &check= { put ?(which terminal-notifier >/dev/null 2>&1) }
      &notify= [cmd duration start]{
        terminal-notifier -title "Finished: "$cmd -message "Running time: "$duration"s"
      }
    ]
  ]
#+end_src

The =-choose-notification-fn= goes through the notification mechanisms in the order defined by =$notifications-to-try= and chooses which one to use.

#+begin_src elvish
  fn -choose-notification-fn {
    each [method-name]{
      method = $notification-fns[$method-name]
      if ($method[check]) {
        put $method[notify]
        return
      }
    } $notifications-to-try
    fail "No valid notification mechanism was found"
  }
#+end_src

The =-produce-notification= function chooses (if needed) a notification function, and calls it with the correct arguments.

#+begin_src elvish
  fn -produce-notification {
    if (not-eq (kind-of $notifier) fn) {
      if (eq $notifier auto) {
        notifier = (-choose-notification-fn)
      } elif (has-key $notification-fns $notifier) {
        notifier = $notification-fns[$notifier][notify]
      } else {
        fail "Invalid value for $long-running-notifications:notifier: "$notifier", please double check"
      }
    }
    $notifier $last-cmd $last-cmd-duration $last-cmd-start-time
  }
#+end_src

** Time tracking functions

These are the main functions which keep track of how long a command takes and call the notifier function if needed.

Return the current time in Unix epoch value.

#+begin_src elvish
  fn now {
    put (date +%s)
  }
#+end_src

Check if  the last command is in the given list, so that we can check the =never-notify= and =always-notify= lists.

#+begin_src elvish
  fn -last-cmd-in-list [list]{
    cmd = (take 1 [(edit:wordify $last-cmd) ""])
    has-value $list $cmd
  }
#+end_src

Wrapper functions to check the =never-notify= and =always-notify= lists.

#+begin_src elvish
  fn -always-notify { -last-cmd-in-list $always-notify }
  fn -never-notify { -last-cmd-in-list $never-notify }
#+end_src

Check the duration of the last command and produce a notification if it exceeds the threshold.

#+begin_src elvish
  fn before-readline-hook {
    -end-time = (now)
    last-cmd-duration = (- $-end-time $last-cmd-start-time)
    if (or (-always-notify) (and (not (-never-notify)) (> $last-cmd-duration $threshold))) {
      -produce-notification
    }
  }
#+end_src

Record the command and its start time.

#+begin_src elvish
  fn after-readline-hook [cmd]{
    last-cmd = $cmd
    last-cmd-start-time = (now)
  }
#+end_src

** Initialization

The =init= function sets up the prompt hooks to compute times and produce notifications as needed.

#+begin_src elvish
  fn init {
    # Set up the hooks
    use ./prompt-hooks
    prompt-hooks:add-before-readline $before-readline-hook~
    prompt-hooks:add-after-readline $after-readline-hook~
    # Initialize to avoid spurious notification when the module is loaded
    last-cmd-start-time = (now)
  }
#+end_src

We call =init= automatically on module load.

#+begin_src elvish
  init
#+end_src
